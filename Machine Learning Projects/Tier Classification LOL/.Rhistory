select(-c(3,4))
head(leaguedf, 5)
leaguedf$Tier <- factor(leaguedf$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
plot1 <- ggplot(data=leaguedf) +
geom_boxplot(mapping = aes(x = Tier, y=winr, fill=Tier)) +
ggtitle('Win Rate and Tier') +
ylab('Win Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="BuPu")
plot2 <- ggplot(data = leaguedf) +
geom_boxplot(mapping = aes(x= Tier, y=pbr, fill=Tier)) +
ggtitle('Pick/Ban Rate and Tier') +
ylab('Pick/Ban Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="Dark2")
grid.arrange(plot1, plot2, ncol=2)
ggplot(data=leaguedf) +
geom_bar(mapping=aes(x=Tier, fill=Tier)) +
scale_fill_brewer('viridis') +
theme(legend.position = 'none') + ylab("Number of Observations")
tier_stats <- leaguedf %>%
group_by(Tier) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
color = colors[i], title = titles[i]
)
} #TODO: FIgure out why its wrong
par(op)
set.seed(27)
# Split the data into test/train. We want 75% for training, and 25% for testing.
inTrain <- createDataPartition(y=leaguedf$Tier, p=0.75, list=FALSE)
leagueTrain <- leaguedf[ inTrain, ]
leagueTest <- leaguedf[ -inTrain, ]
#Verify we did it correct, 0.75*5637 is approx 4225
nrow(leagueTrain)
#Now we start the creation of the models, we chose K-nearest-neighbors, random-forest, and .... stuff
#NOTE PLEASE TRAIN MODELS IN SEPERATE FILE, SAVE AND IMPORT HERE. TRAINING HERE MAKES KNITTING THE RMD FILE TAKE A LONG TIME.
#Consider just doing 1 model and justifying?
#Ranger should work with high dimensional data, I don't think 3 counts lol.
rf_fit <- train(as.factor(Tier) ~ .,
data = leagueTrain,
method="ranger")
rf_fit
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_x_discrete(labels=c('God', 'S', 'A', 'B', 'C', 'D'))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Boundarydf = expand.grid(winr = seq(0.4, 0.6, length.out=100), pbr = seq(0, 1, length.out=100), KDA = seq(1, 5, length.out=100))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
Boundarydf <- Boundarydf %>%
group_by(winr, pbr) %>%
summarize(Tier = Mode(Tier)) %>%
ungroup()
randomentries <- tibble(winr = c(), pbr = c(), Tier=c())
for (tier in unique(Boundarydf$Tier)) {
randomentries <- bind_rows(randomentries, sample_n(filter(leaguedf, Tier==tier), 30))
}
randomentries %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
?train
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), splitrule=c("extratrees", "gini", "variance"), min.node.size=c(1,10))
fitControl <- trainControl(method='CV', number = 5, verboseIter=TRUE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="ranger",
tuneGrid=grid,
trControl = fitControl
)
print(fit)
print(start - proc.time())
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), splitrule=c("extratrees", "gini", "hellinger"), min.node.size=c(1,10))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="ranger",
tuneGrid=grid,
trControl = fitControl
)
print(fit)
print(start - proc.time())
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), splitrule=c("extratrees", "gini"), min.node.size=c(1,10))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="ranger",
tuneGrid=grid,
trControl = fitControl
)
print(fit)
print(start - proc.time())
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), splitrule=c("extratrees", "gini"), min.node.size=c(1,10))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="ranger",
tuneGrid=grid,
trControl = fitControl
)
print(fit)
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), splitrule=c("extratrees", "gini"), min.node.size=c(1,10,25))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="rf",
tuneGrid=grid,
trControl = fitControl
)
start <- proc.time()
grid <- expand.grid(mtry = c(2,3))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="rf",
tuneGrid=grid,
trControl = fitControl
)
print(fit)
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), , splitrule=c("extratrees", "gini"), min.node.size=c(1,10,25))
start <- proc.time()
grid <- expand.grid(mtry = c(2,3), splitrule=c("extratrees", "gini"), min.node.size=c(1,10,25))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="ranger",
tuneGrid=grid,
trControl = fitControl
)
print(fit)
unique(leaguedf$Class)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
leaguedf <- read_csv('../data_sets/S13LeagueOfLegendsData.csv', col_types=cols()) %>%
rename(winr = "Win %", pick = 'Pick %', ban = 'Ban %') %>%
mutate(pbr = pick + ban) %>%
select(-c(1,2,6,7,10,11))
head(leaguedf, 5)
leaguedf$Tier <- factor(leaguedf$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
plot1 <- ggplot(data=leaguedf) +
geom_boxplot(mapping = aes(x = Tier, y=winr, fill=Tier)) +
ggtitle('Win Rate and Tier') +
ylab('Win Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="BuPu")
plot2 <- ggplot(data = leaguedf) +
geom_boxplot(mapping = aes(x= Tier, y=pbr, fill=Tier)) +
ggtitle('Pick/Ban Rate and Tier') +
ylab('Pick/Ban Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="Dark2")
grid.arrange(plot1, plot2, ncol=2)
ggplot(data=leaguedf) +
geom_bar(mapping=aes(x=Tier, fill=Tier)) +
scale_fill_brewer('viridis') +
theme(legend.position = 'none') + ylab("Number of Observations")
tier_stats <- leaguedf %>%
group_by(Tier) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
color = colors[i], title = titles[i]
)
} #TODO: FIgure out why its wrong
par(op)
set.seed(27)
# Split the data into test/train. We want 75% for training, and 25% for testing.
inTrain <- createDataPartition(y=leaguedf$Tier, p=0.75, list=FALSE)
leagueTrain <- leaguedf[ inTrain, ]
leagueTest <- leaguedf[ -inTrain, ]
#Verify we did it correct, 0.75*5637 is approx 4225
nrow(leagueTrain)
rf_fit <- readRDS('rf_initial_fit.rds')
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_x_discrete(labels=c('God', 'S', 'A', 'B', 'C', 'D'))
unique(leaguedf$Class)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Boundarydf = expand.grid(winr = seq(0.4, 0.6, length.out=20), pbr = seq(0, 1, length.out=20), KDA = seq(1, 5, length.out=10), Role = "SUPPORT", `Role %` = seq(0.1,1, length.out=10), Patch=c("13_1", "13_5", "13_12"), Class=c("Mage", "Support"))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
Boundarydf <- Boundarydf %>%
group_by(winr, pbr) %>%
summarize(Tier = Mode(Tier)) %>%
ungroup()
ggplot(enframe(rf_fit$variable.importance, name= "variable", value="importance"), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
coord_flip() +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
print(rf_fit$variable.importance)
randomentries <- tibble(winr = c(), pbr = c(), Tier=c())
for (tier in unique(Boundarydf$Tier)) {
randomentries <- bind_rows(randomentries, sample_n(filter(leaguedf, Tier==tier), 30))
}
randomentries %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Boundarydf = expand.grid(winr = seq(0.4, 0.6, length.out=30), pbr = seq(0, 1, length.out=30), KDA = seq(1, 5, length.out=10), Role = "SUPPORT", `Role %` = seq(0.1,1, length.out=10), Patch=c("13_12"), Class=c("Mage", "Support"))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
Boundarydf <- Boundarydf %>%
group_by(winr, pbr) %>%
summarize(Tier = Mode(Tier)) %>%
ungroup()
randomentries <- tibble(winr = c(), pbr = c(), Tier=c())
for (tier in unique(Boundarydf$Tier)) {
randomentries <- bind_rows(randomentries, sample_n(filter(leaguedf, Tier==tier), 30))
}
randomentries %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
randomentries <- tibble(winr = c(), pbr = c(), Tier=c())
for (tier in unique(Boundarydf$Tier)) {
randomentries <- bind_rows(randomentries, sample_n(filter(leaguedf, Tier==tier, Patch=="13_12"), 30))
}
randomentries <- tibble(winr = c(), pbr = c(), Tier=c())
for (tier in unique(Boundarydf$Tier)) {
randomentries <- bind_rows(randomentries, sample_n(filter(leaguedf, Tier==tier), 30))
}
randomentries %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Boundarydf = expand.grid(winr = seq(0.4, 0.6, length.out=40), pbr = seq(0, 1, length.out=40), KDA = seq(1, 5, length.out=20), Role = "SUPPORT", `Role %` = seq(0.1,1, length.out=10), Patch=c("13_12"), Class=c("Mage", "Support"))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
Boundarydf <- Boundarydf %>%
group_by(winr, pbr) %>%
summarize(Tier = Mode(Tier)) %>%
ungroup()
leaguedf %>% filter(Role=="Support", Patch=="13_12", Class == "Mage" | Class == "Support")
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
leaguedf %>% filter(Role=="SUPPORT", Patch=="13_12", Class == "Mage" | Class == "Support")
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
leaguedf %>% filter(Role=="SUPPORT", Patch=="13_12", Class == "Mage" | Class == "Support")
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size='KDA'), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
leaguedf %>% filter(Role=="SUPPORT", Patch=="13_12", Class == "Mage" | Class == "Support") %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot of Random Sample for RF Model Pre-Hypertuning')
leaguedf %>% filter(Role=="SUPPORT", Patch=="13_12", Class == "Mage" | Class == "Support") %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot for Support in Patch 13.12')
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Boundarydf = expand.grid(winr = seq(0.4, 0.6, length.out=50), pbr = seq(0, 1, length.out=50), KDA = seq(1, 5, length.out=40), Role = "SUPPORT", `Role %` = seq(0.1,1, length.out=10), Patch=c("13_12"), Class=c("Mage", "Support"))
Boundarydf$Tier <- predict(rf_fit, Boundarydf)
Boundarydf <- Boundarydf %>%
group_by(winr, pbr) %>%
summarize(Tier = Mode(Tier)) %>%
ungroup()
write.csv(Boundarydf, "BoundaryFrame.csv")
Boundarydf <- read_csv("BoundaryFrame.csv")
leaguedf %>% filter(Role=="SUPPORT", Patch=="13_12", Class == "Mage" | Class == "Support") %>%
ggplot(mapping=aes(x=winr, y=pbr, fill= Tier)) + geom_raster(data=Boundarydf, alpha=0.5) + geom_point(shape=21, mapping=aes(size=KDA), alpha=0.75) + theme_minimal() + xlab('Win Rate') + ylab('Pick Ban Rate') + ggtitle('Boundary Plot for Support in Patch 13.12')
ggplot(enframe(rf_fit$variable.importance, name= "variable", value="importance"), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
coord_flip() +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
print(rf_fit$variable.importance)
ggplot(varImp(rf_fit), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
coord_flip() +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
varImp(rf_fit)
rf_fit
ggplot(varImp(rf_fit), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
coord_flip() +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
leaguedf <- read_csv('../data_sets/S13LeagueOfLegendsData.csv', col_types=cols()) %>%
rename(winr = "Win %", pick = 'Pick %', ban = 'Ban %') %>%
mutate(pbr = pick + ban) %>%
select(-c(1,2,6,7,10,11))
head(leaguedf, 5)
leaguedf$Tier <- factor(leaguedf$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
plot1 <- ggplot(data=leaguedf) +
geom_boxplot(mapping = aes(x = Tier, y=winr, fill=Tier)) +
ggtitle('Win Rate and Tier') +
ylab('Win Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="BuPu")
plot2 <- ggplot(data = leaguedf) +
geom_boxplot(mapping = aes(x= Tier, y=pbr, fill=Tier)) +
ggtitle('Pick/Ban Rate and Tier') +
ylab('Pick/Ban Rate') +
theme(legend.position='none') +
scale_fill_brewer(palette="Dark2")
grid.arrange(plot1, plot2, ncol=2)
ggplot(data=leaguedf) +
geom_bar(mapping=aes(x=Tier, fill=Tier)) +
scale_fill_brewer('viridis') +
theme(legend.position = 'none') + ylab("Number of Observations")
tier_stats <- leaguedf %>%
group_by(Tier) %>%
summarize(KDA = median(KDA), pbr = median(pbr), wr=median(winr))
tier_stats$Tier <-  factor(tier_stats$Tier, levels=c('D', 'C', 'B', 'A', 'S', 'God'), ordered=TRUE)
tier_stats <- as_tibble(tier_stats) %>% column_to_rownames(var = "Tier")
# statistics wanted by tier, and change row name to tier
max_min <- data.frame(KDA = c(0, 5), pbr=c(0,1), wr=c(0,1)) #Formatting data for radar chart
rownames(max_min) <- c("Max", "Min")
radar_frame <- rbind(max_min, tier_stats) #final frame for radar chart
#The next two lines split the area for the radar charts
op <- par(mar = c(1.5,1.5,1.5,1.5))
#Split into 6 pieces
par(mfrow = c(2,3))
#Color for each tier
colors = c("#D95F45", "#D9B245", "#62D945", "#45D9AA", "#45A6D9", "#7145D9")
#Title for each chart
titles = c("A", "B", "C", "D", "S", "God")
#make them
for (i in 1:6) {
create_beautiful_radarchart(data = radar_frame[c(1,2, i+2), ],
color = colors[i], title = titles[i]
)
} #TODO: FIgure out why its wrong
par(op)
set.seed(27)
# Split the data into test/train. We want 75% for training, and 25% for testing.
inTrain <- createDataPartition(y=leaguedf$Tier, p=0.75, list=FALSE)
leagueTrain <- leaguedf[ inTrain, ]
leagueTest <- leaguedf[ -inTrain, ]
#Verify we did it correct, 0.75*5637 is approx 4225
nrow(leagueTrain)
rf_fit <- readRDS('rf_initial_fit.rds')
rf_pred <- predict(rf_fit, leagueTest)
cm <- confusionMatrix(rf_pred, as.factor(leagueTest$Tier), dnn = c("Prediction", "Actual"))
plt <- as.data.frame(cm$table)
plt$Prediction <- factor(plt$Prediction, levels=rev(levels(plt$Prediction)))
ggplot(plt, aes(Prediction,Actual, fill=Freq)) +
geom_tile() + geom_text(aes(label=Freq)) +
scale_fill_gradient(low="white", high="#009194") +
labs(x = "Actual",y = "Prediction") +
scale_y_discrete(labels=c('D', 'C', 'B', 'A', 'S', 'God')) +
scale_x_discrete(labels=c('God', 'S', 'A', 'B', 'C', 'D'))
Boundarydf <- read_csv("BoundaryFrame.csv")
ggplot(varImp(fit), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
coord_flip() +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
grid <- expand.grid(mtry = c(6,12,18,24,30,36), splitrule=c("extratrees", "gini"), min.node.size=c(1,10,25,40,50))
fitControl <- trainControl(method='CV', number = 5, verboseIter=FALSE)
fit <- train(as.factor(Tier)~.,
data=leagueTrain,
method="ranger",
tuneGrid=grid,
trControl = fitControl, importance="impurity"
)
saveRDS(fit, "RangerFITwPatch.rds")
print(fit)
ggplot(varImp(fit), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
coord_flip() +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
ggplot(varImp(fit), mapping=aes(x=reorder(variable, importance), y=importance, fill=importance)) + geom_bar(stat = "identity", position = "dodge")  +
ylab("Variable Importance") +
xlab("") +
ggtitle("Information Value Summary") +
guides(fill = "none") +
scale_fill_gradient(low = "red", high = "blue")
print(fit)
getwd()
setwd("../../Coding")
setwd("/School/")
setwd("/School")
setwd("C:/Users/bobby/Coding/School/STOR 320/STOR-320-Group-13")
setwd("C:/Users/bobby/Coding/School/STOR 320/STOR-320-Group-13/r_scripts")
write.csv(Boundarydf, "BoundaryFrame.csv")
knitr::opts_chunk$set(echo = TRUE)
options(dplyr.summarise.inform = FALSE)
getwd()
library(tidyverse)
library(gridExtra)
library(caret)
library(fmsb)
library(arules)
library(patchwork)
library(ranger)
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 0.7,
caxislabels = NULL, title = NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = scales::alpha(color, 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
caxislabels = caxislabels, title = title, ...
)
}
leaguedf <- read_csv('S13LeagueOfLegendsData.csv', col_types=cols()) %>%
rename(winr = "Win %", pick = 'Pick %', ban = 'Ban %', roler = 'Role %') %>%
mutate(pbr = pick + ban, tier = Tier) %>%
select(-c(1,2,5, 6,7,10,11))
head(leaguedf, 5)
